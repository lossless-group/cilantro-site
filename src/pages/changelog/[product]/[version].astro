---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import { getCollection, render } from 'astro:content';
import { buildOgMeta } from '../../../utils/og';
import type { GetStaticPaths } from 'astro';

// Generate static paths for all changelog entries
export const getStaticPaths = (async () => {
  const neoEntries = await getCollection('changelog-neo');
  const parsleeEntries = await getCollection('changelog-parslee');
  const siteEntries = await getCollection('changelog-cilantro-site');

  const paths = [
    ...neoEntries.map(entry => ({
      params: { product: 'neo', version: entry.data.slug },
      props: { entry, productDisplay: 'Neo', productColor: 'purple' }
    })),
    ...parsleeEntries.map(entry => ({
      params: { product: 'parslee', version: entry.data.slug },
      props: { entry, productDisplay: 'Parslee', productColor: 'cyan' }
    })),
    ...siteEntries.map(entry => ({
      params: { product: 'cilantro-site', version: entry.data.slug },
      props: { entry, productDisplay: 'Cilantro Site', productColor: 'emerald' }
    })),
  ];

  return paths;
}) satisfies GetStaticPaths;

const { entry, productDisplay, productColor } = Astro.props;
const { data } = entry;

// Render markdown content
const { Content, headings } = await render(entry);

// SEO metadata
const pageTitle = `${productDisplay} ${data.version || ''} - ${data.title}`;
const pageDescription = data.summary || data.lede || `Changelog entry for ${productDisplay}`;
const pageUrl = `/changelog/${Astro.params.product}/${data.slug}`;

// Format date
function formatDate(date: Date | undefined): string {
  if (!date) return 'Unknown date';
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }).format(date);
}

// Generate table of contents from h2 headings
const toc = headings
  .filter(h => h.depth === 2)
  .map(h => ({
    text: h.text,
    slug: h.slug
  }));
---

<BaseLayout title={pageTitle} meta={buildOgMeta({ title: pageTitle, description: pageDescription, url: pageUrl })}>
  <!-- Header -->
  <header class="border-b border-gray-200 dark:border-gray-800 bg-gradient-to-b from-gray-100/30 dark:from-gray-900/30 to-transparent">
    <div class="mx-auto max-w-7xl px-6 py-12 lg:px-8 lg:py-16">
      <div class="mx-auto max-w-4xl">
        <!-- Breadcrumb -->
        <nav class="mb-6 flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
          <a href="/changelog" class="transition-colors hover:text-gray-900 dark:hover:text-gray-100">All Changelogs</a>
          <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M9 5l7 7-7 7" />
          </svg>
          <a href={`/changelog/${Astro.params.product}`} class="transition-colors hover:text-gray-900 dark:hover:text-gray-100">
            {productDisplay}
          </a>
          <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M9 5l7 7-7 7" />
          </svg>
          <span class="font-semibold text-gray-900 dark:text-gray-100">{data.slug}</span>
        </nav>

        <!-- Badges -->
        <div class="mb-4 flex flex-wrap items-center gap-2">
          <span class={`
            inline-flex items-center rounded-full px-3 py-1 text-xs font-bold uppercase tracking-wide
            ${productColor === 'purple' ? 'bg-purple-500/10 text-purple-600 dark:bg-purple-500/20 dark:text-purple-400' : ''}
            ${productColor === 'cyan' ? 'bg-cyan-500/10 text-cyan-600 dark:bg-cyan-500/20 dark:text-cyan-400' : ''}
            ${productColor === 'emerald' ? 'bg-emerald-500/10 text-emerald-600 dark:bg-emerald-500/20 dark:text-emerald-400' : ''}
          `}>
            {productDisplay}
          </span>

          {data.version && (
            <span class="inline-flex items-center rounded-md bg-gray-100 dark:bg-gray-900 px-3 py-1 font-mono text-xs font-semibold text-gray-900 dark:text-gray-100">
              {data.version}
            </span>
          )}

          <span class={`
            inline-flex items-center rounded-md px-2.5 py-1 text-xs font-medium
            ${data.type === 'Major' ? 'bg-red-50 text-red-700 dark:bg-red-950 dark:text-red-400' : ''}
            ${data.type === 'Minor' ? 'bg-blue-50 text-blue-700 dark:bg-blue-950 dark:text-blue-400' : ''}
            ${data.type === 'Patch' ? 'bg-gray-50 text-gray-700 dark:bg-gray-900 dark:text-gray-400' : ''}
            ${data.type === 'Documentation' ? 'bg-purple-50 text-purple-700 dark:bg-purple-950 dark:text-purple-400' : ''}
            ${data.type === 'Refactor' || data.type === 'Infrastructure' ? 'bg-amber-50 text-amber-700 dark:bg-amber-950 dark:text-amber-400' : ''}
          `}>
            {data.type}
          </span>

          {data.is_release && (
            <span class="inline-flex items-center rounded-md bg-green-600 px-2.5 py-1 text-xs font-bold text-white">
              Release
            </span>
          )}
        </div>

        <!-- Title -->
        <h1 class="mb-4 text-4xl font-bold tracking-tight lg:text-5xl">
          {data.title}
        </h1>

        <!-- Lede -->
        {data.lede && (
          <p class="mb-6 text-xl leading-relaxed text-gray-600 dark:text-gray-400">
            {data.lede}
          </p>
        )}

        <!-- Meta -->
        <div class="flex flex-wrap items-center gap-4 text-sm text-gray-600 dark:text-gray-400">
          <time datetime={data.date_shipped?.toISOString()}>
            {formatDate(data.date_shipped)}
          </time>
          {data.authors && data.authors.length > 0 && (
            <>
              <span>â€¢</span>
              <span>By {data.authors.join(', ')}</span>
            </>
          )}
        </div>

        <!-- Tags -->
        {data.tags && data.tags.length > 0 && (
          <div class="mt-4 flex flex-wrap gap-2">
            {data.tags.map(tag => (
              <span class="rounded-md bg-gray-100 dark:bg-gray-900 px-3 py-1 text-xs font-medium text-gray-900 dark:text-gray-100">{tag}</span>
            ))}
          </div>
        )}
      </div>
    </div>
  </header>

  <!-- Content -->
  <main class="py-12 lg:py-16">
    <div class="mx-auto max-w-7xl px-6 lg:px-8">
      <div class="mx-auto grid max-w-4xl gap-8 lg:max-w-none lg:grid-cols-[1fr_280px]">
        <!-- Main content -->
        <article class="prose prose-lg dark:prose-invert max-w-none">
          <Content />
        </article>

        <!-- Sidebar (TOC + Meta) -->
        <aside class="lg:sticky lg:top-8 lg:h-fit">
          {toc.length > 0 && (
            <nav class="rounded-lg border border-gray-200 dark:border-gray-800 bg-white dark:bg-gray-950 p-6">
              <h2 class="mb-4 text-sm font-bold uppercase tracking-wide text-gray-600 dark:text-gray-400">
                On This Page
              </h2>
              <ul class="space-y-2 text-sm">
                {toc.map(item => (
                  <li>
                    <a
                      href={`#${item.slug}`}
                      class={`
                        toc-link block border-l-2 border-transparent py-1 pl-3 transition-colors hover:text-gray-900 dark:hover:text-gray-100
                        ${productColor === 'purple' ? 'hover:border-purple-500' : ''}
                        ${productColor === 'cyan' ? 'hover:border-cyan-500' : ''}
                        ${productColor === 'emerald' ? 'hover:border-emerald-500' : ''}
                      `}
                    >
                      {item.text}
                    </a>
                  </li>
                ))}
              </ul>
            </nav>
          )}

          {/* Meta info */}
          {(data.signed_off?.length || data.contributors?.length) && (
            <div class="mt-6 rounded-lg border border-gray-200 dark:border-gray-800 bg-white dark:bg-gray-950 p-6 text-sm">
              {data.signed_off && data.signed_off.length > 0 && (
                <div class="mb-3">
                  <strong class="text-gray-900 dark:text-gray-100">Reviewed by:</strong>
                  <p class="text-gray-600 dark:text-gray-400">{data.signed_off.join(', ')}</p>
                </div>
              )}
              {data.contributors && data.contributors.length > 0 && (
                <div>
                  <strong class="text-gray-900 dark:text-gray-100">Contributors:</strong>
                  <p class="text-gray-600 dark:text-gray-400">{data.contributors.join(', ')}</p>
                </div>
              )}
            </div>
          )}
        </aside>
      </div>
    </div>
  </main>

  <!-- Navigation -->
  <footer class="border-t border-gray-200 dark:border-gray-800 bg-gray-100/30 dark:bg-gray-900/30">
    <div class="mx-auto max-w-7xl px-6 py-8 lg:px-8">
      <div class="mx-auto flex max-w-4xl flex-col items-start justify-between gap-4 sm:flex-row sm:items-center">
        <a
          href={`/changelog/${Astro.params.product}`}
          class={`
            inline-flex items-center rounded-lg border border-gray-200 dark:border-gray-800 bg-white dark:bg-gray-950 px-4 py-2 text-sm font-medium transition-all hover:bg-gray-100 dark:hover:bg-gray-900
            ${productColor === 'purple' ? 'text-gray-900 dark:text-gray-100 hover:border-purple-500' : ''}
            ${productColor === 'cyan' ? 'text-gray-900 dark:text-gray-100 hover:border-cyan-500' : ''}
            ${productColor === 'emerald' ? 'text-gray-900 dark:text-gray-100 hover:border-emerald-500' : ''}
          `}
        >
          <svg class="mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M15 19l-7-7 7-7" />
          </svg>
          Back to {productDisplay} Changelog
        </a>
        <a
          href="/changelog"
          class="inline-flex items-center text-sm font-medium text-gray-600 dark:text-gray-400 transition-colors hover:text-gray-900 dark:hover:text-gray-100"
        >
          View All Products
        </a>
      </div>
    </div>
  </footer>
</BaseLayout>

<style>
  /* Prose styling for markdown content */
  .prose {
    color: var(--foreground);
  }

  .prose :global(h2) {
    margin-top: 3rem;
    margin-bottom: 1rem;
    scroll-margin-top: 5rem;
    font-size: 1.875rem;
    font-weight: 700;
    letter-spacing: -0.025em;
  }

  .prose :global(h3) {
    margin-top: 2rem;
    margin-bottom: 0.75rem;
    font-size: 1.5rem;
    font-weight: 700;
    letter-spacing: -0.025em;
  }

  .prose :global(h4) {
    margin-top: 1.5rem;
    margin-bottom: 0.5rem;
    font-size: 1.25rem;
    font-weight: 600;
  }

  .prose :global(p) {
    margin-bottom: 1rem;
    line-height: 1.75;
  }

  .prose :global(ul),
  .prose :global(ol) {
    margin-bottom: 1rem;
    padding-left: 1.5rem;
  }

  .prose :global(ul) {
    list-style-type: disc;
  }

  .prose :global(ol) {
    list-style-type: decimal;
  }

  .prose :global(li) {
    margin-top: 0.5rem;
    line-height: 1.75;
  }

  .prose :global(code) {
    border-radius: 0.25rem;
    background: var(--muted);
    padding: 0.125rem 0.375rem;
    font-family: ui-monospace, monospace;
    font-size: 0.875rem;
  }

  .prose :global(pre) {
    margin-bottom: 1.5rem;
    overflow-x: auto;
    border-radius: 0.5rem;
    border: 1px solid var(--border);
    background: var(--card);
    padding: 1rem;
  }

  .prose :global(pre code) {
    background: transparent;
    padding: 0;
  }

  .prose :global(blockquote) {
    margin: 1.5rem 0;
    border-left: 4px solid var(--primary);
    padding-left: 1rem;
    font-style: italic;
    color: var(--muted-foreground);
  }

  .prose :global(a) {
    font-weight: 500;
    color: var(--primary);
    text-decoration: underline;
    text-decoration-color: var(--primary);
    text-decoration-thickness: 1px;
    text-underline-offset: 2px;
    transition: all 0.2s;
  }

  .prose :global(a:hover) {
    text-decoration-thickness: 2px;
  }

  .prose :global(strong) {
    font-weight: 700;
    color: var(--foreground);
  }

  .prose :global(hr) {
    margin: 2rem 0;
    border-top: 1px solid var(--border);
  }

  .prose :global(table) {
    width: 100%;
    border-collapse: collapse;
    text-align: left;
    font-size: 0.875rem;
  }

  .prose :global(th) {
    border-bottom: 1px solid var(--border);
    background: var(--muted);
    padding: 0.5rem 1rem;
    font-weight: 600;
  }

  .prose :global(td) {
    border-bottom: 1px solid var(--border);
    padding: 0.5rem 1rem;
  }

  /* Scroll spy for TOC */
  .toc-link.active {
    border-left-color: var(--primary);
    color: var(--foreground);
    font-weight: 600;
  }
</style>

<script>
  // TOC scroll spy
  document.addEventListener('DOMContentLoaded', () => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach(entry => {
          const id = entry.target.getAttribute('id');
          const tocLink = document.querySelector(`.toc-link[href="#${id}"]`);

          if (entry.isIntersecting && tocLink) {
            document.querySelectorAll('.toc-link').forEach(link => {
              link.classList.remove('active');
            });
            tocLink.classList.add('active');
          }
        });
      },
      {
        rootMargin: '-100px 0px -66%',
        threshold: 0
      }
    );

    // Observe all h2 elements
    document.querySelectorAll('.prose h2[id]').forEach((heading) => {
      observer.observe(heading);
    });
  });
</script>
</BaseLayout>
